from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

def import_db_usuario(database):
    global db
    db = database

class Usuarios(db.Model):
    tablename = 'usuarios'

    idusuario = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(255), nullable=True)
    password = db.Column(db.String(255), nullable=True)
    metodopago = db.Column(db.String(30), nullable=False)
    status = db.Column(db.String(30), nullable=False)

    def repr(self):
        return f'<Usuario: {self.idusuario}>'
    
    def to_dict(self):
        return {
            'idusuario': self.idusuario,
            'email': self.email,
            'password': self.password,
            'metodopago': self.metodopago,
            'status': self.status
        }


# class Usuario(Model):
#     """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

#     Do not edit the class manually.
#     """

#     def __init__(self, id_usuario=None, email=None, password=None, metodo_pago=None, status=None, perfiles_usuario=None):  # noqa: E501
#         """Usuario - a model defined in OpenAPI

#         :param id_usuario: The id_usuario of this Usuario.  # noqa: E501
#         :type id_usuario: int
#         :param email: The email of this Usuario.  # noqa: E501
#         :type email: str
#         :param password: The password of this Usuario.  # noqa: E501
#         :type password: str
#         :param metodo_pago: The metodo_pago of this Usuario.  # noqa: E501
#         :type metodo_pago: str
#         :param status: The status of this Usuario.  # noqa: E501
#         :type status: str
#         :param perfiles_usuario: The perfiles_usuario of this Usuario.  # noqa: E501
#         :type perfiles_usuario: List[Perfil]
#         """
#         self.openapi_types = {
#             'id_usuario': int,
#             'email': str,
#             'password': str,
#             'metodo_pago': str,
#             'status': str,
#             'perfiles_usuario': List[Perfil]
#         }

#         self.attribute_map = {
#             'id_usuario': 'idUsuario',
#             'email': 'email',
#             'password': 'password',
#             'metodo_pago': 'metodoPago',
#             'status': 'status',
#             'perfiles_usuario': 'perfilesUsuario'
#         }

#         self._id_usuario = id_usuario
#         self._email = email
#         self._password = password
#         self._metodo_pago = metodo_pago
#         self._status = status
#         self._perfiles_usuario = perfiles_usuario

#     @classmethod
#     def from_dict(cls, dikt) -> 'Usuario':
#         """Returns the dict as a model

#         :param dikt: A dict.
#         :type: dict
#         :return: The Usuario of this Usuario.  # noqa: E501
#         :rtype: Usuario
#         """
#         return util.deserialize_model(dikt, cls)

#     @property
#     def id_usuario(self) -> int:
#         """Gets the id_usuario of this Usuario.

#         Identificador único del usuario  # noqa: E501

#         :return: The id_usuario of this Usuario.
#         :rtype: int
#         """
#         return self._id_usuario

#     @id_usuario.setter
#     def id_usuario(self, id_usuario: int):
#         """Sets the id_usuario of this Usuario.

#         Identificador único del usuario  # noqa: E501

#         :param id_usuario: The id_usuario of this Usuario.
#         :type id_usuario: int
#         """

#         self._id_usuario = id_usuario

#     @property
#     def email(self) -> str:
#         """Gets the email of this Usuario.

#         Correo electrónico asociado a la cuenta perteneciente al usuario y junto a la contraseña permiten el acceso a la misma y a los servicios que ofrece la aplicación  # noqa: E501

#         :return: The email of this Usuario.
#         :rtype: str
#         """
#         return self._email

#     @email.setter
#     def email(self, email: str):
#         """Sets the email of this Usuario.

#         Correo electrónico asociado a la cuenta perteneciente al usuario y junto a la contraseña permiten el acceso a la misma y a los servicios que ofrece la aplicación  # noqa: E501

#         :param email: The email of this Usuario.
#         :type email: str
#         """

#         self._email = email

#     @property
#     def password(self) -> str:
#         """Gets the password of this Usuario.

#         Contraseña que junto al correo electrónico se encuentran asociados a la cuenta perteneciente al usuario y le permiten el acceso a la misma y a los servicios que ofrece la aplicación  # noqa: E501

#         :return: The password of this Usuario.
#         :rtype: str
#         """
#         return self._password

#     @password.setter
#     def password(self, password: str):
#         """Sets the password of this Usuario.

#         Contraseña que junto al correo electrónico se encuentran asociados a la cuenta perteneciente al usuario y le permiten el acceso a la misma y a los servicios que ofrece la aplicación  # noqa: E501

#         :param password: The password of this Usuario.
#         :type password: str
#         """

#         self._password = password

#     @property
#     def metodo_pago(self) -> str:
#         """Gets the metodo_pago of this Usuario.

#         Forma en la que el usuario realiza el pago correspondiente a los servicios contratados en la aplicación  # noqa: E501

#         :return: The metodo_pago of this Usuario.
#         :rtype: str
#         """
#         return self._metodo_pago

#     @metodo_pago.setter
#     def metodo_pago(self, metodo_pago: str):
#         """Sets the metodo_pago of this Usuario.

#         Forma en la que el usuario realiza el pago correspondiente a los servicios contratados en la aplicación  # noqa: E501

#         :param metodo_pago: The metodo_pago of this Usuario.
#         :type metodo_pago: str
#         """
#         allowed_values = ["tarjeta de credito", "tarjeta virtual", "tarjeta prepago", "paypal"]  # noqa: E501
#         if metodo_pago not in allowed_values:
#             raise ValueError(
#                 "Invalid value for `metodo_pago` ({0}), must be one of {1}"
#                 .format(metodo_pago, allowed_values)
#             )

#         self._metodo_pago = metodo_pago

#     @property
#     def status(self) -> str:
#         """Gets the status of this Usuario.

#         Estado en el que la cuenta asociada al usuario se encuentra en este momento  # noqa: E501

#         :return: The status of this Usuario.
#         :rtype: str
#         """
#         return self._status

#     @status.setter
#     def status(self, status: str):
#         """Sets the status of this Usuario.

#         Estado en el que la cuenta asociada al usuario se encuentra en este momento  # noqa: E501

#         :param status: The status of this Usuario.
#         :type status: str
#         """
#         allowed_values = ["activo", "en suspension", "pendiente de pago"]  # noqa: E501
#         if status not in allowed_values:
#             raise ValueError(
#                 "Invalid value for `status` ({0}), must be one of {1}"
#                 .format(status, allowed_values)
#             )

#         self._status = status

#     @property
#     def perfiles_usuario(self) -> List[Perfil]:
#         """Gets the perfiles_usuario of this Usuario.

#         Conjunto de perfiles pertenecientes a la cuenta asociada al usuario. Este atributo se ha definido como un array de objetos, en el cual cada posición almacenará la información referente a un perfil, es decir, nombrePerfil y favoritosPerfil  # noqa: E501

#         :return: The perfiles_usuario of this Usuario.
#         :rtype: List[Perfil]
#         """
#         return self._perfiles_usuario

#     @perfiles_usuario.setter
#     def perfiles_usuario(self, perfiles_usuario: List[Perfil]):
#         """Sets the perfiles_usuario of this Usuario.

#         Conjunto de perfiles pertenecientes a la cuenta asociada al usuario. Este atributo se ha definido como un array de objetos, en el cual cada posición almacenará la información referente a un perfil, es decir, nombrePerfil y favoritosPerfil  # noqa: E501

#         :param perfiles_usuario: The perfiles_usuario of this Usuario.
#         :type perfiles_usuario: List[Perfil]
#         """

#         self._perfiles_usuario = perfiles_usuario
